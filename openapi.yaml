openapi: 3.1.0
info:
  title: Quiz
  description: Quiz API
  version: 0.0.0

servers:
  - url: 'https://quiz.carlgo11.com/api'

components:
  schemas:
    Question:
      description: "Question object"
      x-key-pattern: '^[0-9]+$'
      properties:
        options:
          $ref: '#/components/schemas/options'
        correct:
          $ref: '#/components/schemas/correct'
      example:
        options:
          - "A"
          - "B"
          - "C"
        correct:
          - "B"
    options:
      description: "Array of available answers to choose from for a question"
      type: array
      items:
        $ref: '#/components/schemas/Answer'
      additionalProperties:
        type: string
      example: "A"
    correct:
      description: "The correct answer for a question"
      type: string
      items:
        $ref: '#/components/schemas/Answer'
      example:
        - "B"
    Answer:
      description: "Answer to a question"
      type: string
      example:
        - "A"
        - "B"
        - "1"
        - "X"
    NonNumericalQuestion:
      properties:
        error:
          example: "Question key must be numerical"
          default: "Question key must be numerical"
          type: string
    QuestionKeysMissing:
      properties:
        error:
          example: "Keys 'options' and 'correct' must be present"
          default: "Keys 'options' and 'correct' must be present"
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
  parameters:
    bearerAuth:
      in: header
      name: Authorization
      description: JWT token
      required: true
      schema:
        type: string
    basicAuth:
      in: header
      name: Authorization
      description: Basic Authentication
      required: true
      schema:
        type: string
    acceptJSON:
      in: header
      name: Accept
      required: true
      schema:
        type: string
      content:
        application/json: { }
    contentJSON:
      in: header
      name: Content-Type
      required: true
      schema:
        type: string
      content:
        application/json: { }

  responses:
    UnauthorizedUser:
      description: "Missing or invalid credentials"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                default: "Incorrect or missing login credentials"
                type: string
      headers:
        www-authorize:
          schema:
            type: string
            default: 'Bearer realm="Authentication Required"'
    UnauthorizedAdmin:
      description: "Missing or invalid credentials"
      content:
        application/json:
          schema:
            properties:
              error:
                default: "Incorrect or missing login credentials"
      headers:
        www-authorize:
          schema:
            type: string
            default: 'Basic realm="Admin Credentials Required"'
    Accept:
      description: "Accept not set to 'application/json'"
      headers:
        accept:
          schema:
            type: string
            default: "application/json"
    Content-Type:
      description: "Content-Type not set to 'application/json'"
      headers:
        accept:
          schema:
            type: string
            default: "application/json"
    DB-Error:
      description: "Unable to establish connection to database"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                default: "Database error"
                type: string
    Misc:
      description: Misc internal server error

paths:

  /questions/:
    get:
      summary: Get all questions.
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/bearerAuth'
        - $ref: '#/components/parameters/acceptJSON'
      responses:
        200:
          description: Fetched list of all questions
          content:
            application/json:
              example:
                "1":
                  "options":
                    - "A"
                    - "B"
                    - "C"
                "2":
                  "options":
                    - "1"
                    - "2"
                    - "3"
              schema:
                patternProperties:
                '^[0-9]+$':
        401:
          $ref: '#/components/responses/UnauthorizedUser'
        406:
          $ref: '#/components/responses/Accept'
        502:
          $ref: '#/components/responses/DB-Error'

    put:
      summary: Create a new question
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/bearerAuth'
        - $ref: '#/components/parameters/acceptJSON'
        - $ref: '#/components/parameters/contentJSON'
      requestBody:
        required: true
        content:
          application/json:
            example:
              "1":
                "options":
                  - "A"
                  - "B"
                  - "C"
                "correct": "B"
            schema:
              patternProperties:
                '^[0-9]+$':
                  $ref: '#/components/schemas/Question'

      responses:
        201:
          description: Question created
        401:
          $ref: '#/components/responses/UnauthorizedAdmin'
        403:
          description: User lacks required privileges
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    default: "Admin privileges required"
                    example: "Admin privileges required"
        406:
          $ref: '#/components/responses/Accept'
        422:
          description: "Question name not numerical or not containing 'options' and 'correct'"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NonNumericalQuestion'
                  - $ref: '#/components/schemas/QuestionKeysMissing'
        500:
          description: Misc internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    default: "Error uploading question {{ question }}"
                    example: "Error uploading question 2"
                    type: string
        502:
          $ref: '#/components/responses/DB-Error'
  /questions/{question}:
    delete:
      summary: Delete a question
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: question
          required: true
          schema:
            type: integer
            minimum: 1
          description: The question key to delete
        - $ref: '#/components/parameters/bearerAuth'
      responses:
        204:
          description: Successfully deleted question
        401:
          $ref: '#/components/responses/UnauthorizedAdmin'
        403:
          description: User lacks required privileges
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    default: "Admin privileges required"
                    example: "Admin privileges required"
        404:
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    default: "Question ${question} not found"
                    example: "Question 2 not found"
        500:
          description: Misc internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    default: "Error deleting question {question}"
                    example: "Error deleting question 2"
        502:
          $ref: '#/components/responses/DB-Error'

  /answers:
    post:
      summary: Upload the team's answers.
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/bearerAuth'
        - $ref: '#/components/parameters/contentJSON'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              x-key-pattern: '^[0-9]+$'
              minLength: 1
              additionalProperties:
                type: string
              example:
                "1": "A"
                "2": "X"
                "3": "2"
              description: Question number as key followed to the chosen answer
      responses:
        204:
          description: Answers successfully stored
        401:
          $ref: '#/components/responses/UnauthorizedUser'
        415:
          $ref: '#/components/responses/Content-Type'
        500:
          $ref: '#/components/responses/Misc'
        502:
          $ref: '#/components/responses/DB-Error'

  /teams:
    put:
      summary: Create a new team/user
      parameters:
        - $ref: '#/components/parameters/contentJSON'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  type: string
      responses:
        201:
          description: Team successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: "JWT token to be used for further communication"
                    type: string
        409:
          description: User already exists (username taken)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    default: "User already exists"
                    type: string
        415:
          $ref: '#/components/responses/Content-Type'
        422:
          description: No username specified
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    default: "No username specified"
                    type: string
        502:
          $ref: '#/components/responses/DB-Error'
        500:
          $ref: '#/components/responses/Misc'

  /admin:
    put:
      summary: Create a new admin account
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/basicAuth'
        - $ref: '#/components/parameters/acceptJSON'
      responses:
        201:
          description: Admin account created
          content:
            application/json:
              schema:
                properties:
                  token:
                    description: JWT admin token
        401:
          $ref: '#/components/responses/UnauthorizedAdmin'
        406:
          $ref: '#/components/responses/Accept'
        409:
          description: An admin account already exists
        502:
          $ref: '#/components/responses/DB-Error'
        500:
          $ref: '#/components/responses/Misc'

    get:
      summary: Verify admin account credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/basicAuth'
        - $ref: '#/components/parameters/acceptJSON'
      responses:
        200:
          description: Successful authentication
        401:
          $ref: '#/components/responses/UnauthorizedAdmin'
        406:
          $ref: '#/components/responses/Accept'
        502:
          $ref: '#/components/responses/DB-Error'

